#include <iostream>
#include <string>
class BSTree {
private:
    int value;
    BSTree* parent = nullptr;
    BSTree* child_l = nullptr;
    BSTree* child_r = nullptr;

public:
    BSTree(int value) {
        this->set_head_value(value);
    }

    BSTree(int value, BSTree* p) {
        this->set_head_value(value);
        this->set_parent(p);
    }

    void set_parent(BSTree* p) {
        this->parent = p;
    }

    BSTree* get_parent() {
        return this->parent;
    }
    
    BSTree* get_child_r() {
        return this->child_r;
    }

    int get_child_l_value() {
        if (this->get_child_l() != nullptr)
            return this->get_child_l()->get_head_value();
        throw;
    }

    void set_child_r(BSTree* ch) {
        this->child_r = ch;
    }

    BSTree* get_child_l() {
        return this->child_l;
    }

    int get_child_r_value() {
        if (this->get_child_r() != nullptr)
            return this->get_child_r()->get_head_value();
        throw;
    }

    void set_child_l(BSTree* ch) {
        this->child_l = ch;
    }

    int get_head_value() {
        return this->value;
    }

    void set_head_value(int v) {
        this->value = v;
    }

    void add_value(int value) {
        if (value < this->get_head_value()) {
            if (this->get_child_l() == nullptr) {
                BSTree* nt = new BSTree(value, this);
                this->set_child_l(nt);
            }
            else
                this->get_child_l()->add_value(value);
        }
        else {
            if (this->get_child_r() == nullptr) {
                BSTree* nt = new BSTree(value, this);
                this->set_child_r(nt);
            }
            else
                this->get_child_r()->add_value(value);
        }
    }

    void add_tree(BSTree* t) {
        if (value < this->get_head_value()) {
            if (this->get_child_l() == nullptr) {
                this->set_child_l(t);
            }
            else
                this->get_child_l()->add_tree(t);
        }
        else {
            if (this->get_child_r() == nullptr) {
                this->set_child_r(t);
            }
            else
                this->get_child_r()->add_tree(t);
        }
    }

    bool have_children() {
        if (this->get_child_l() == nullptr && this->get_child_r() == nullptr)
            return false;
        return true;
    }

    bool have_value(int value) {
        if (this->get_head_value() == value)
            return true;

        if (not this->have_children())
            return false;
        else if (this->get_head_value() < value && this->get_child_r() != nullptr)
            return this->get_child_r()->have_value(value);
        else if (this->get_head_value() < value && this->get_child_r() == nullptr)
            return false;
        else if (this->get_head_value() > value && this->get_child_l() != nullptr)
            return this->get_child_l()->have_value(value);
        else if (this->get_head_value() > value && this->get_child_l() == nullptr)
            return false;
    }

    int get_height() {
        int heigth_l = this->get_child_l() == 0 ? 0 : this->get_child_l()->get_height();
        int heigth_r = this->get_child_r() == 0 ? 0 : this->get_child_r()->get_height();

        if (heigth_l == 0 && heigth_r == 0)
            return 1;
        else if (heigth_l > heigth_r)
            return 1 + heigth_l;
        else
            return 1 + heigth_r;
    }

    std::string tranvension() {
        if (not this->have_children()) 
            return std::to_string(this->get_head_value());
        else if (this->get_child_l() == nullptr && this->get_child_r() != nullptr) 
            return std::to_string(this->get_head_value()) + ";" + this->get_child_r()->tranvension();
        else if (this->get_child_l() != nullptr && this->get_child_r() == nullptr) 
            return std::to_string(this->get_head_value()) + ";" + this->get_child_l()->tranvension();
        else 
            return this->get_child_l()->tranvension() + ";" + std::to_string(this->get_head_value()) + ";" + this->get_child_r()->tranvension();
    }

    void remove_value(int value) {
        if (this->get_head_value() == value) {
            bool is_child_left = this->get_parent()->get_head_value() > this->get_head_value();

            BSTree* rigth_child = this->get_child_r();
            BSTree* left_child = this->get_child_l();

            BSTree* child_to_bound = left_child == nullptr ? rigth_child : left_child;

            if (rigth_child == nullptr && left_child == nullptr && is_child_left) {
                this->get_parent()->set_child_l(nullptr);
                return;
            } else if (rigth_child == nullptr && left_child == nullptr && not is_child_left) {
                this->get_parent()->set_child_r(nullptr);
                return;
            }

            if (is_child_left) {
                this->get_parent()->set_child_l(child_to_bound);
                child_to_bound->set_parent(this->get_parent());
            }
            else {
                this->get_parent()->set_child_r(child_to_bound);
                child_to_bound->set_parent(this->get_parent());
            }

            if (rigth_child != nullptr && left_child != nullptr) {
                left_child->add_tree(rigth_child);
            }
        }

        if (not this->have_children())
            return;
        else if (this->get_head_value() < value && this->get_child_r() != nullptr)
            this->get_child_r()->remove_value(value);
        else if (this->get_head_value() < value && this->get_child_r() == nullptr)
            return;
        else if (this->get_head_value() > value && this->get_child_l() != nullptr)
            this->get_child_l()->remove_value(value);
        else if (this->get_head_value() > value && this->get_child_l() == nullptr)
            return;
    }
};

int main()
{
    BSTree bst(0);

    bst.add_value(1);
    bst.add_value(2);
    bst.add_value(2);
    bst.add_value(4);
    bst.add_value(4);
    bst.add_value(4);
    bst.add_value(-4);
    bst.add_value(-3);
    bst.add_value(-1);
    bst.add_value(-2);

    bst.remove_value(-1);

    std::cout << bst.tranvension() << std::endl;
}
